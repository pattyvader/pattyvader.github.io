[
  
  {
    "title": "Codificando a mudança: desafios e triunfos de mulheres na indústria de TI",
    "url": "/2025/03/08/mulheres-em-tech.html",
    "categories": "",
    "tags": "",
    "date": "2025-03-08 00:00:00 -0300",
    





    "snippet": "Compartilhar conhecimento sempre foi uma das minhas bandeiras e, após conhecer e integrar a comunidade Python, tive a certeza de que estava no caminho certo. Ter um blog e escrever sempre foi um dos meus objetivos desde os tempos de faculdade, lá no início da minha vida profissional, há 15 anos.Meus posts normalmente abordam assuntos técnicos, como ferramentas que aprendi, carreira ou opiniões pessoais sobre tecnologia. Fiquei um bom tempo sem atualizar meu blog e criar posts por diversas razões da vida. Este ano, decidi retomar esse projeto, que ficou em stand-by por um longo período.Decidi voltar a escrever porque estou em um momento profissional no qual surgem questionamentos sobre o que realmente sei. Escrever, para mim, é uma forma de extravasar e compartilhar sentimentos e reflexões que, talvez, não sejam só meus, e que de alguma forma possam ajudar outras mulheres que estão passando pelos mesmos questionamentos e reflexões nesse momento de carreira.Mas por que o primeiro post é exatamente no dia 8 de março?É uma data icônica que nos lembra do nosso papel na sociedade, e fica aqui meu alerta: essa reflexão não deve acontecer apenas nesse dia. Todos os dias precisamos questionar nosso espaço em todas as esferas da sociedade. E, como sou da área de tecnologia, é nela que vou focar.Que mulher que vive e respira tecnologia nunca pensou em desistir da área? Eu já pensei pelo menos umas duas vezes. Existem muitos motivos que nos levam a isso: preconceitos, síndrome da impostora, autossabotagem, cansaço de nos impor em um mundo majoritariamente masculino… Quantas vezes já nos pegamos pensando “Não sou boa o suficiente nisso” ou “Sou uma fraude!”? Ou ainda “Realmente não tenho aptidão para trabalhar em tech!”? Quantas vezes paramos para nos perguntar se esse era realmente o caminho que queríamos seguir? Por que não escolhi uma profissão mais tranquila? Será que existe realmente uma profissão tranquila de trabalhar?Depois de muitos anos trabalhando em tecnologia, em diversos tipos de empresas, e conversando com muitas mulheres de tech, cheguei à conclusão de que um dos indicadores mais importantes no mundo corporativo é: Como a empresa trata a diversidade? Como as mulheres são recebidas nos times? Existe preocupação com segurança psicológica? Você se sente ouvida? Você sente que o seu trabalho é respeitado? Em uma única palavra: C-U-L-T-U-R-A.Se essa palavrinha mágica não representa um ativo importante para a empresa, nada do que você fizer ou falar surtirá algum efeito no seu ambiente de trabalho. É algo que deve fazer parte do dia a dia da empresa e do time.E se conselho fosse bom, venderíamos, aqui vai um meu: entrar e trabalhar nesse mundo nunca foi, não é e não será fácil. Gostaria que, no início da minha jornada, alguém tivesse me dito isso. Creio que teria me preparado melhor para encarar de frente os desafios que nós, mulheres, enfrentamos diariamente.Ser forte, não desistir, confiar em si mesma. Sempre ouvi que devemos mentalizar esses mantras, mas ninguém nos ensina como fazer isso. Não temos suporte para isso. Desde pequenas, somos educadas para nos encaixar em um mundo moldado para atitudes masculinas. Para sermos ouvidas, muitas vezes precisamos nos comportar como eles.Mas e se não quisermos?E nem devemos. Já ouviram aquele discurso de que diversidade em tech enriquece o ambiente, o time, a empresa? É totalmente verdade. Um ambiente saudável é aquele em que você não tem medo de errar, não tem medo de falar, de se expor. É aquele onde existem outras mulheres para dar suporte uma a outra em momentos bons e ruins. Em resumo: é onde você pode ser você. Devemos cada vez mais lutar para que ambientes assim sejam construídos.Precisamos dominar esses espaços, disseminando atitudes e comportamentos que reflitam mais nossa essência.Qual o objetivo primordial deste post? Evitar que mais uma mulher desista da tecnologia. Dizer a ela que o caminho é árduo e cheio de obstáculos, mas que não está sozinha. Busque apoio de amigas, mentoras, líderes e, claro, comunidades tech voltadas para mulheres. Nesses grupos, temos espaços seguros para compartilhar anseios, dúvidas e temores.Não devemos nos sentir imperfeitas ou inaptas a cargos tech. Pelo contrário, devemos acolher esse sentimento e usá-lo como combustível para melhorar nossos espaços de trabalho e convivência. Devemos nos impor mais, espalhar e divulgar o trabalho de outras mulheres que estão lutando todos os dias para construir um mundo tech mais inclusivo e mais seguro.É momento de acolher nosso sentimento de imperfeição, expressar vulnerabilidades e criar ambientes mais inclusivos e saudáveis."
  },
  
  {
    "title": "PySpark e Sistemas de Recomendação",
    "url": "/2021/04/16/pyspark-e-sistemas-recomendacao.html",
    "categories": "",
    "tags": "",
    "date": "2021-04-16 00:00:00 -0300",
    





    "snippet": "Vivemos em um mundo rodeado por plataformas que nos sugerem o que ouvir, comprar ou assistir.Não que isso seja ruim! Muitas vezes assistimos uma série por sugestão do Netflix ou ouvimos uma música porque o Spotify achou que iríamos gostar. Não é verdade?Já parou para pensar como essas plataformas conseguem fazer isse tipo de sugestão? Não? Sim? Talvez?No backend de todo esse mundo de sugestões existem os chamados Sistemas de Recomendação ou Recommender Systems. Eles são treinados exatamente para entender dos nossos gostos e desejos, fazendo assim, sugestões de consumo e na maioria das vezes eles acertam em cheio!Neste post falarei um pouco sobre Sistemas de Recomendação, e mostrarei de uma forma prática, usando Python e PySpark, como esses sistemas funcionam.   Sistemas de Recomendação       A recommender system isn’t only a fancy algorithm. It’s also about understanding the data and your users.        -- Practical Recommender Systems  Podemos entender Sistemas de Recomendação somente pelo viés dos algoritmos ou é algo mais enigmático do que imaginamos? Podemos dizer que eles além de possuírem algoritmos complexos também entendem muito sobre os dados que são coletados, e consequentemente conseguem compreender, ou tentar compreender, nosso consumo ao ponto de nos fazer sugestões?O que é um Sistema de recomendação?A imensa quantidade de opções que as grandes plataformas de ecommerce ou streaming possuem em seus catálagos é muito assustador, sem mencionar, a quantidade de acessos que essas mesmas plataformas recebem diariamente.Como fazer com que seus usuários fiquem satisfeitos e encontrem exatamente o que procuram? Como auxiliá-los na escolha do que comprar, do que assistir ou ouvir?Desses tipos de questionamentos surgiram os Sistemas de Recomendação. Eles são algoritmos altamente treinados para sugerir opções de consumo dentro do imenso catálago de produtos, conteúdo ou serviços de empresas como Netflix, Amazon, Spotify ou Linkedin.Esses sistemas utilizam a imensidade de dados que são coletados e armazenados diariamente para aprender e entender a preferência de consumo dos usuários, oferecendo assim, uma experiência personalizada de utilização de suas plataformas.       A recommender system calculates and provides relevant content to the user based on knowledge of the user, content, and interactions between the user and the item.        -- Practical Recommender Systems  Em resumo: um Sistema de Recomendação é um sistema que possui algoritmos extremamente especializados e treinados. Ele oferece aos usuários conteúdos e produtos de uma maneira personalizada. Para fazer sugestões ele aprende sobre nossos gostos e preferências, usando para isso, uma imensa quantidade de dados coletados pelas interações realizadas dentro de determinada plataforma.AlgoritmosPara um Sistema de Recomendação executar sua função é necessário possuir algoritmos “inteligentes” e bem treinados.Nos próximas seções serão descritos os algoritmos mais utilizados na construção de SRs (Sistemas de Recomendação).Baseado em popularidadeComeçamos com um dos tipos mais básicos de algoritmos. Normalmente ele é utilizado para fazer recomendação de produtos ou conteúdos para os usuários, baseados na popularidade de um item.Para fazer essas recomendações ele se baseia na compra, visualização, curtida ou download que os usuários realizam de determinado produto ou serviço, fazendo assim, um ranking dos items mais populares.Esse tipo de SR não costuma ser altamente personalizado já que as mesmas recomendações, geralmente, são iguais para vários grupos de usuários.Baseado em conteúdoOs algoritmos de filtragem baseada em conteúdo fazem recomendações fundamentadas nos conteúdos descritivos (nome, localização, descrição etc) dos items juntamente com as avaliações e comportamento dos usuários, tentando assim, encontrar itens similares em seu catálogo.Podemos citar aqui, a famosa análise de sentimentos. O usuário, na maioria das vezes, escreve reviews sobre algum item e o sistema pode se basear nessa review para oferecer ou não produtos similares.Filtragem colaborativaEsse tipo de algoritmo recomenda itens similares aos quais o usuário curtiu anteriormente. Aqui o item é considerado como um caixa preta, ou seja, o conteúdo descritivo dele não é importante.A idéia central é calcular o quanto um produto, que o usuário gostou, é similar a outro do catálogo e recomendar somente itens que agradarão ao usuário.HíbridosNos dias atuais esse é o tipo de sistema de recomendação mais utilizado. Ele normalmente combina os SR baseado em contéudo e o de filtragem colaborativa.Realizar essa mistura de técnicas permite que a acurácia das recomendações sejam muito melhores!Esses sistemas tornaram-se parte integral de várias plataformas, como o Netflix, para ajudar seus usuários a consumir conteúdo mais acertivo.CuriosidadeO Netflix, em 2009, promoveu uma competição que tinha como objetivo premiar, com 1 milhão de dólares, quem desenvolvesse um algoritmo de filtragem colaborativa que fizesse recomendações sem utilizar qualquer informação sobre o usuário ou filme.O objetivo era se basear somente nas avaliações que os filmes e séries recebiam. Para entender um pouco mais: Netflix Prize.PySparkPara criarmos um pequeno Sistema de Recomendação vamos entender primeiro o que é o PySpark!   O que é Pyspark?PySpark é uma interface que serve de comunicação com o Spark, e foi desenvolvida utilizando Python.Em linhas gerais: você pode interagir com o Spark usando Python.Mas afinal o que é Spark?SparkSpark nada mais é do que um framework que possibilita processar grandes quantidade de dados, e é hoje em dia, a ferramenta mais utilizada em Big Data.Foi criado pela Universidade da Califórnia, mas atualmente, faz parte do catálago de produtos da Fundação Apache. É open-source e você pode contribuir com o projeto que está disponível no github.Todo o core do Spark é escrito em Scala e executado em um JVM (Java Virtual Machine). Podemos escrever aplicações Spark em R, Python, Java e Scala.Lembram do PySpark? É ele que permite que exista essa comunicação com o core do Spark, caso contrário, teríamos de obrigatoriamente saber Scala para criar aplicações Spark.Biblioteca de Machine LearningObviamente o Spark possui uma bliblioteca muito poderosa para trabalharmos com ML (Machine Learning), a Spark MLlib.Com essa biblioteca podemos criar modelos de Machine Learning de uma maneira distribuída, e possui a maioria de algoritmos para classificação, regressão, clusterização, sistemas de recomendação e NLP (Natural Language Processing).O céu é o limite!Parte prática: recomendando filmesVamos deixar de lado um pouco a teoria e passar à parte prática!Para mostrar o uso de PySpark e ML para construir um simples Sistemas de Recomendação usaremos um case amplamente disseminado por livros e tutoriais: recomendação de filmes.É algo que todos gostamos, e que possui grandes datasets disponíveis no MovieLens.Quer ver o PySpark em ação? Então diverta-se com um Jupyter Notebook que mostra o funcionamento de um sistema de recomendação, e que se encontra aqui!Links interessantesPractical Recommender SystemsMachine Learning with PySparkPro Machine Learning AlgorithmsCollective Intelligence in ActionPySpark DocumentationRecommender Systems: The textbook"
  },
  
  {
    "title": "Preciso saber programar?",
    "url": "/2020/10/22/engenharia-dados-programacao.html",
    "categories": "",
    "tags": "",
    "date": "2020-10-22 00:00:00 -0300",
    





    "snippet": "Preciso saber programar em alguma linguagem para trabalhar com Engenharia de Dados?Esta é uma pergunta natural e válida que surge para quem está iniciando a trajetória como Pessoa Engenheira de Dados. E a resposta é sim!!!Para quem já possui um background baseado em Engenharia de software, como eu, fica bem mais confortável programar.Independentemente da área em Engenharia de Dados que você atuará sempre será necessário o desenvolvimento de scripts. E acrescento algo mais: estar familiarizado com boas Práticas de Engenharia de Software também facilita o desenvolvimento de pipelines de dados e scripts para os mais variados fins.Qual linguagem devo aprender?Depende. Para iniciantes recomendo Python, por exemplo, por ter uma sintaxe mais fácil de se aprender. Mas na verdade a linguagem usada dependerá do projeto, da empresa e do time que você trabalhará.Normalmente muitas ferramentas de Engenharia de Dados, como Hadoop ou Spark, usam Java, Scala ou Python para o desenvolvimento de scripts. Não é obrigatório aprender uma delas, mas facilitaria a sua vida no momento de usar uma dessas ferramentas.Sempre é bom lembrar: a linguagem de programação é uma ferramenta que te ajudará a desenvolver sistemas. Não é o fim, mas o meio para se criar bons scripts.Onde aplicaria o conhecimento de programação?Em engenharia de dados usa-se programação em praticamente tudo. Você pode encontrar em scripts de ETL, dentro de ferramentas na nuvem (AWS, GCP ou Azure), em scripts de Machine Learning ou em IaC (Infraestructure as Code).Em resumo: o uso de programação vai desde scripts ETL, passando por Machine Learning até para fazer o deploy da sua arquitetura de dados na nuvem.Devo entender de algoritmos?Linguagem de programação e algoritmos são dois itens que vivem juntos. Sempre que aprender um terá de aprender o outro. Essa é a lei da vida!O interessante de aprender algoritmos é que seus sistemas passarão a ser mais performáticos e assertivos.Não digo que é uma obrigatoriedade, mas que em algum momento da sua trajetória profissional seu uso pode fazer uma grande diferença, como por exemplo, deixar um script mais rápido. 😃Links interessantesLeetCodeHackerranckEntendendo Algoritmos: Um guia ilustrado para programadores e outros curiosos"
  },
  
  {
    "title": "Engenharia de dados: Por onde começar?",
    "url": "/2020/07/17/engenharia-de-dados-por-onde-comecar.html",
    "categories": "",
    "tags": "",
    "date": "2020-07-17 00:00:00 -0300",
    





    "snippet": "A idéia de criar pipelines de dados, modelar Data Warehouses, escalar modelos de Machine Learning ou pensar em maneiras de coletar dados em tempo real te agrada? Então a Engenharia de Dados é para você!Baseado em minha experiência escrevi esse post para servir de guia para quem deseja investir na área de Engenharia de Dados.Por onde devo começar?Se você tem experiência com Engenharia de Software, Infraestrutura ou Banco de dados já é um excelente começo.Acho bem interessante uns rodmaps que aparecem no GitHub que podem servir de start. Eles mostram uma timeline de conhecimento que você deve saber ou conhecer.Em que devo focar?Foque no básico para começar. Invista grande parte do seu tempo em projetar pipelines de dados em um ambiente cloud. Estude a teoria de Sistemas distribuídos, ETL, Modelagem de dados e Data Warehouse.Conforme você avança nos seus estudos trabalhar com Spark, Hadoop, Map Reduce entre outras tecnologias torna-se natural. Não se preocupe em um primeiro momento dominar completamente essas ferramentas.Tem um artigo bem interessante, do Allan Sene, que fala sobre os tipos de Pessoa Engenheira de Dados. Cada profissional foca em um determinado assunto como Machine Learning, Monitoramento e Provisionamento ou Desenvolvimento de serviços de coleta de dados.No próximo item faço uma lista do que considero importante que um profissional conheça.Tecnologias e skillsMuito se fala sobre quais tecnologias e skills são necessários para trabalhar com Engenharia de Dados. Todos os dias aparecem novas tecnologias e metodologias.Como dominar tudo isso? Realmente é humanamente impossível 🤖. Acredito que devemos dominar o básico, e conforme necessitamos vamos adicionando ao nosso portfólio novas tecnologias e ferramentas.Listo abaixo por ordem de prioridade o que acredito que uma Pessoa Engenheira de Dados necessita saber, o que seria interessante saber e o que considero opcional.Evitei listar ferramentas pois é importantíssimo saber a teoria por trás delas, e a utilização de determinado framework dependerá da arquitetura existente na empresa que você trabalha.Conselho: recomendo fortemente que você crie pipelines de dados na AWS, GCP ou Azure. Elas permitem o uso de muitos serviços grátis por 1 ano. E muito cuidado para não deixar a arquitetura executando. Construa, absorva o conhecimento, documente todo processo e destrua/pare todos os serviços. Senão a conta no final do mês será bem alta 💰🔥 Necessário:  Sistemas distribuídos  Data Warehouse  Modelagem de dados  ETL\\ELT  Data Lake  SQL\\NoSQL  Linguagens de Programação (Python, Scala ou Java)  Computação em nuvem (AWS, GCP ou Azure)  Big Data🆒 Interessante:  Governança de dados  Práticas de Engenharia de Software  Ferramentas para gerenciar fluxos de trabalho (Luigi, Airflow etc)  Machine Learning🦄 Opcional:  Data Mesh  SRE  DevOps  DataOps  Data lineage  Data LiteracyLinks interessantesData engineering: A quick and simple definitionA Beginner’s Guide to Data EngineeringThe Rise of the Data EngineerThe Data Engineering CookbookOs Tipos de Engenheiros de DadosCréditos:  Nuvem vetor criado por macrovector - br.freepik.comÍcones feitos por Payungkead from www.flaticon.com"
  },
  
  {
    "title": "O que é Ciência de dados?",
    "url": "/2020/07/14/ciencia-de-dados-introducao.html",
    "categories": "",
    "tags": "",
    "date": "2020-07-14 00:00:00 -0300",
    





    "snippet": "Afinal o que é Ciência de dados? Já faz um tempo que essa área ganhou grande notoriedade e a atenção de muitas empresas. A demanda por profissionais cresceu enormemente, e como consequência as dúvidas sobre Ciência de Dados aumenta de forma exponencial.Este post tenta responder essa pergunta descrevendo de uma forma sucinta o que é Ciência de dados, discorre sobre a sua matéria-prima - os dados - e comenta um pouco sobre os principais profissionais envolvidos nessa área.DefiniçãoCiência de dados é uma área que congrega várias disciplinas, dentre as quais pode-se citar estatística, matemática, computação entre outras. Possui como objetivo principal adquirir conhecimento através da análise de uma grande quantidade de dados.Para adquirir esse conhecimento é necessário vários processos que vão desde a aquisição desses dados em sua fonte de origem (planilhas, banco de dados, xml, csv, videos, imagens etc.), passando por sua limpeza até a posterior análise desses dados.HistóriaA Ciência de dados, como área, foi primeiramente descrita por William S. Cleveland, um cientista da computação e professor de Estatística da Purdue University.Ele escreveu um artigo entitulado Data Science: An Action Plan for Expanding the Technical Areas of the Field of Statistics. Nesse paper William S. Cleveland combina o poder da computação com Data Mining para melhorar análises estatísticas.Apartir desse momento o termo se expandiu e atualmente é amplamente utilizado para se referir a área responsável por analisar a grande quantidade de dados que geramos diariamente e retirar algum conhecimento deles.Dados       Dados são fatos coletados e normalmente armazenados. Informação é o dado analisado e com algum significado. O conhecimento é a informação interpretada, entendida e aplicada para um fim.        -- Introdução à Ciência de Dados  O que é um dado?Em termos gerais dados são características qualitativas (não mensuráveis) e quantitativas (mensuráveis) de um objeto ou pessoa.Essas características estão armazenadas, na grande maioria das vezes, em banco de dados. Pode-se destacar os seguintes tipos de dados: estruturados, semi-estruturados e não-estruturados. A definição de cada um deles é descrita na seção abaixo.Tipos de dadosDados estruturadosEsses tipos de dados são organizados e estruturados em tabelas (linhas e colunas). Pode-se encontrá-los em base de dados relacionais ou planilhas eletrônicas.Dados semi-estruturadosSão dados que não podem ser armazenados em um banco de dados, mas possuem algum tipo de hierarquia e/ou ordem interna. Pode-se citar o xml e json.Dados não-estruturadosNormalmente são dados que não possuem uma estrutura conhecida, ou seja, não se pode armazená-los em tabelas, como por exemplo, videos, músicas, emails etc.Ciclo de vidaAtualmente os dados podem ser produzidos digitalmente de muitas formas por algum dispositivo, por exemplo, computadores, sensores, cameras digitais, eletrodomésticos etc.Esses dados precisam ser armazenados em alguma estrutura, na maioria das vezes em um banco de dados, para que sejam consumidos posteriormente.Para que os dados armazenados possam ser analisados é necessário que eles sofram um processo de transformação, que é possibilitar que esse dado fique em um formato acessível e com qualidade de análise.Essa transformação é feita utilizando o processo de ETL (Extract, Transform and Load), em português Extrair, Transformar e Carregar. Normalmente os dados são carregados em Data Warehouses ou Armazém de dados desenvolvidos para facilitar a análise dos dados.Depois que os dados passaram pelo processo de ETL podemos iniciar o processo de análise. Nesse momento começa a geração de informação e conhecimento a partir dos dados. É o momento de lapidá-los.Por fim em sua última etapa os dados podem ser descartados. Pode-se estipular um tempo para seu armazenamento. Isso varia conforme políticas de gestão de dados da organização.Ciclo de vida do dadoBig dataBig data é um termo genérico para qualquer coleção de dados tão grandes ou complexos, que fica difícil processá-los usando técnicas tradicionais de gerenciamento de dados convencional. Pode-se ter uma variedade de dados gerados de inúmeras formas.Para gerenciar e trabalhar com essa grande quantidade de dados, Big Data engloba outros conceitos e tecnologias como computação em nuvem, estatística, infraestrutura, governança de dados e de projetos etc. Na grande maioria das vezes em projeto de Ciência de Dados utiliza-se Big Data como aliada no gerenciamento e análise de dados coletados.Inicialmente o conceito de Big Data foi proposto utilizando apenas 3 V’s: volume, velocidade e variedade. Foram acrescentados mais 2: veracidade e valor. Essa lista de V’s está em constante crescimento e pode-se encontrar até mais de 10 V’s 😱. Aqui serão abordados apenas 5 V’s, que serão descritos na seção seguinte.Os 5 V’s do Big Data  VolumeDescreve a quantidade de dados armazenados por uma organização. Lembrando que os esforços de armazenamento, análise e gestão de dados aumentam conforme crescem a geração dos dados.  VelocidadeCorresponde a velocidade de processamento e disponibilização dos dados para análise.  VariedadeOs dados podem aparecer em diversos formatos e vir de diferentes fontes.  VeracidadeEsse item se refere a qualidade e confiança dos dados.  ValorQuando os dados coletados e analisados geram valor para a organização.Processo da Ciência de dadosNa Ciência de Dados existe um processo bem definido que se inicia na coleta dos dados até a visualização dos mesmos. Os próximos items explicarão cada fase individualmente.Coleta dos dadosNesta fase sabe-se quais dados são necessários e onde se pode encontrá-los. Eles podem estar em vários locais, em APIs ou banco de dados, por exemplo, e de várias formas como tabelas, planilhas eletrônicas, xml, csv etc.Preparação dos dadosNa fase anterior podem ocorrer erros ao efetuar a coleta dos dados. Nessa fase é o momento de corrigí-los, o que confere mais qualidade aos dados e os prepara para uso nas fases posteriores.Essa fase consiste em três sub-fases: a limpeza de dados que remove valores falsos  e inconsistências de uma fonte de dados; a integração de dados que enriquece os dados combinando informações de várias fontes; e a transformação de dados que garante que os dados estejam em um formato adequado para usar nas análises.Exploração dos dadosA exploração de dados se preocupa em construir uma compreensão mais profunda dos dados. Tenta entender como as variáveis ​​interagem umas com as outras, a distribuição dos dados e se existem discrepâncias.Para conseguir isso, é necessário o uso principalmente de estatística, técnicas visuais e modelagem simples. Essa etapa geralmente é chamada de Análise Exploratória de Dados.Inicia-se aqui o detalhamento dos tipos de dados com os quais estamos lidando. Esta é uma etapa essencial do processo.Depois que essa etapa é concluída, o analista geralmente passa várias horas aprendendo sobre o domínio, usando código ou outras ferramentas para manipular e explorar os dados.Modelagem dos dadosNesta fase o uso intensivo de modelos de simulação e estatística utilizando machine learning é muito grande.Esses modelos são desenvolvidos principalmente para prever situações ou cenários que são importantes para análise do negócio.Visualização dos dadosEsta é a última fase do processo onde é apresentado o resultado para o time de negócios. Esses resultados podem ser visualizados de várias formas que podem variar de simples gráficos até aprimorados dashboards.Mercado de trabalhoNo início da Ciência de dados todo o processo de coleta, análise e visualização de dados era realizado pelo cientista de dados. Com o crescimento da área outras funções foram criadas, e cada profissional se especializou em algumas etapas do processo.Hoje podemos destacar as 3 principais funções: Analista de Dados, Cientista de Dados e Pessoa Engenheira de dados. Cada uma dessas especializações possuem skills e focos específicos. No meu caso, em particular, me identifiquei com a área de Engenharia de Dados. 😃Como se pode visualizar, no infográfico abaixo, cada área possui conhecimentos específicos. Esses são somente alguns dos skills necessários.Analista de dadosO analista de dados organiza e interpreta os dados usando ferramentas de análise de dados. O resultado pode ser visualizado em forma de dashboards que servirão de guia para a tomada de decisão.Alguns skills e ferramentas necessárias: SQL, R, Python, Ferramentas para visualização de dados (Tableau, Looker, Qlik View etc) e Estatística.Cientista de dadosO cientista de dados extrai conhecimento e interpreta os dados, usando para isso muita estatística, matemática e algoritmos de machine learning.Alguns skills e ferramentas necessárias: SQL, R, Python, Estatística, Machine Learning, NLP e Matemática e Modelagem.Pessoa Engenheira de dadosO Pessoa Engenheira de dados possui como missão desenvolver meios de coletar, extrair, limpar e proteger os dados, entregando-os aos Cientistas e Analistas de dados para posterior análise.Alguns skills e ferramentas necessárias: SQL\\NoSQL, Python-Java-Scala (Pelo menos uma delas), Hadoop, Spark, Ferramentas de orquestração de tarefas ( Luigi, Airflow etc.), DW, ETL\\ELT, Datalake, computação em nuvem (AWS-GCP-Azure - Pelo menos uma delas) e conhecimento de práticas de Engenharia de Software.Links interessantesDataData ScienceData HackersRise of the Data ScientistWhat is really data about?The Four V’s of Big DataBig dataData Scientist: The Sexiest Job of the 21st CenturyData engineer: The ‘real’ sexiest job of the 21st centuryBecome a data scientist? or a data analyst? Here’s the differenceNoSQL e a Importância da Engenharia de Software e da Engenharia de Dados para o Big DataCareers in Data Science: Data Analyst vs Data Engineer vs Data ScientistLivrosData Science For DummiesPrinciples of Data ScienceIntroducing Data ScienceDoing Data ScienceIntrodução à Ciência de Dados"
  },
  
  {
    "title": "APIs RESTful em Go",
    "url": "/2019/04/20/apis-restful-em-golang.html",
    "categories": "",
    "tags": "",
    "date": "2019-04-20 00:00:00 -0300",
    





    "snippet": "Minha aventura pelo mundo Go resultou nessa primeira implementação de API. Resumindo: é algo despretencioso e totalmente iniciante!Esse post descreve em linhas gerais um pouco sobre Go e APIs RESTful, e logo após é explicado sobre o que foi codificado. O código da API está disponível aqui.A linguagem GoO Go é uma linguagem de programação relativamente nova, e foi desenvolvida por Engenheiros do Google, em 2007. Já em 2009, o Go tornou-se Open Source, permitindo a todos contribuir na melhoria e evolução da linguagem. Contribua!Para facilitar o aprendizado e um melhor entendimento do básico da linguagem, foi desenvolvido o Go tour. Ele é um ambiente online e interativo, onde se pode dar os primeiros passos com Go.Principais características  Possui uma sintaxe bem simples.  É uma linguagem compilada.  A curva de aprendizado é baixa.APIs RESTfulO termo REST (Representational State Transfer) foi criado por Roy Fielding, em 2000. É um estilo de arquitetura para ajudar na criação e organização de sistemas distribuídos. Podemos usar esse padrão arquitetural para criar uma API (Application Programming Interface).Podemos definir API com um sistema onde a interação cliente/servidor é realizada através do protocolo HTTP. Nessa interação o cliente realiza requisições para o servidor solicitando dados de determinado recurso. Normalmente a resposta com esses dados estão no formato .JSON.[    {        &quot;ID&quot;: 1,        &quot;Name&quot;: &quot;Patty&quot;,        &quot;Email&quot;: &quot;pattyvaderbr@gmail.com&quot;,        &quot;Password&quot;: &quot;123456&quot;,        &quot;Admin&quot;: true    },]Resumindo: API RESTful é uma plataforma que expõe dados como recursos, permitindo assim, interagir com eles.1. Recurso, Coleção e Representação1.1 RecursoRecurso é a representação de algo, ou um objeto, que pode ser manipulado. Pode-se dizer que user é um recurso.1.2 ColeçãoColeção é um conjunto de recursos, como por exemplo, /users.1.3 RepresentaçãoÉ a maneira pela qual um recurso pode ser representado. Essa representação pode ser feita em JSON, XML ou HTML.[    {        &quot;ID&quot;: 1,        &quot;Name&quot;: &quot;Patty&quot;,        &quot;Email&quot;: &quot;pattyvaderbr@gmail.com&quot;,        &quot;Password&quot;: &quot;123456&quot;,        &quot;Admin&quot;: true    },]2. HTTP Verbs  GET : obtém a representação de um recurso.  HEAD: obtém os headers.  POST: cria um novo recurso baseado na sua representação.  PUT : muda o estado do recurso ou cria um novo se você conhece a sua URL.  DELETE: remove um recurso.  PATCH: modifica parte do estado de um recurso.3. Status code  1xx - Informativo: solicitação recebida e dando continuidade ao processo.  2xx - Sucesso: a solicitação foi recebida, entendida e aceita pelo servidor.  3xx - Redirecionamento: o cliente deve executar uma ação adicional para completar a sua requisição.  4xx - Erro no cliente: a solicitação enviada pelo cliente possui erros.  5xx - Erro no servidor: erros ocorridos no servidor.Um pouco de códigoTecnologias utilizadas  Gorilla - implementa rotas URL  PostreSQL  TOML - lê arquivos do tipo TOMLArquivos do tipo TOMLÉ um formato de arquivo de configuração mais fácil de ler e escrever, criado por Tom Preston-Werner que é o co-fundador do GitHub. Consiste em pares de chave/valor, nomes de seções e comentários. Abaixo segue um exemplo desse tipo de arquivo.#dados para conexão no banco de dados[database]server = &quot;192.168.1.1&quot;ports = [ 8001, 8001, 8002 ]connection_max = 5000enabled = trueTrata-se de um acrônimo para “Tom’s Obvious, Minimal Language”.ImplementaçãoO projeto users_service está estruturado da seguinte maneira:  users_service/     dao/        connectionDAO.go        userDAO.go     handlers/        userHandler.go     models/        user.go     .gitignore     .travis.yml     LICENSE     README.md     config.toml     database.sql     main.go1. Especificação da APIA API possui as seguintes URLs:GET lista todos os usuários/v1/users/GET lista somente 1 usuário/v1/users/{id}POST cadastra um novo usuário/v1/users/PUT atualiza somente 1 usuário/v1/users/{id}DELETE remove somente 1 usuário/v1/users/{id}2. DAO DAO: Data Access Object (Objeto de acesso a dados) Consiste em separar as regras de negócio do acesso à base de dados.O diretório dao possui os arquivos connectionDAO.go e userDAO.go2.1 connectionDAO.goEsse arquivo possui 2 funções:func InitDB() {   var conf configFile   var err error   if _, err = toml.DecodeFile(&quot;config.toml&quot;, &amp;amp;conf); err != nil {     log.Println(err)     return   }   dbInfo := fmt.Sprintf(&quot;host=%s port=%d user=%s password=%s dbname=%s sslmode=%s&quot;,     conf.DB.Host, conf.DB.Port, conf.DB.User, conf.DB.Password, conf.DB.Name, conf.DB.SSLmode)   db, err = sql.Open(&quot;postgres&quot;, dbInfo)   if err != nil {     panic(err)   }   err = db.Ping()   if err != nil {     panic(err)   }   log.Printf(&quot;host: %s, port: %d, user: %s, name: %s&quot;,     conf.DB.Host, conf.DB.Port, conf.DB.User, conf.DB.Name)}func CloseDB() {   db.Close()}A primeira é responsável por ler o arquivo do tipo TOML e efetuar a conexão com o banco de dados. E a segunda fecha essa conexão.2.2 userDAO.goNesse arquivo constam as funções responsáveis por lidar diretamente com o banco de dados. São elas:func GetAllUsers()func GetUserByID()func CreateUser()func UpdateUser()func RemoveUser()Para exemplificar a estrutura que possuem essas funções, abaixo é mostrada a RemoveUser que é responsável por remover um usuário da base de dados.func RemoveUser(userID int) (int, error) {  result, err := db.Exec(`DELETE FROM users where id = $1`, userID)  if err != nil {     return 0, err  }  rowsDeleted, err := result.RowsAffected()  if err != nil {     return 0, err  }  return int(rowsDeleted), err}3. HandlersOs handlers são responsáveis por “escutar” as requisições do cliente e retornar uma resposta. No arquivo userHandler.go encontram-se as seguintes funções:func GetAllUsersHandler()func GetUserByIDHandler()func CreateUserHandler()func UpdateUserHandler()func DeleteUserHandler()A função GetAllUsersHandler, por exemplo, é responsável por retornar todos os usuários da base de dados. Retorna o erro 500, caso a requisição não seja bem sucedida.func GetAllUsersHandler(w http.ResponseWriter, r *http.Request) {  users, err := dao.GetAllUsers()  if err != nil {    http.Error(w, &quot;Internal error&quot;, http.StatusInternalServerError)    return  }  FormatResponseToJSON(w, http.StatusOK, users)}Foi adicionado a esse arquivo uma função que formata a resposta para o cliente em formato JSON.func FormatResponseToJSON(w http.ResponseWriter, statusCode int, response interface{}) {  json, err := json.Marshal(response)  if err != nil {    http.Error(w, err.Error(), http.StatusInternalServerError)  }  w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)  w.WriteHeader(statusCode)  w.Write(json)}4. ModelsO modelo é uma struct do tipo User. É bem simples e representa os dados de usuário que serão necessários para cadastrá-lo no banco de dados. Essa struct está declarada em user.go.type User struct {  ID       int  Name     string  Email    string  Password string  Admin    bool}5. ConfigO arquivo config.go possui os dados de conexão com o banco de dados. É um arquivo do tipo TOML.[database]user=&quot;users_service&quot;host=&quot;127.0.0.1&quot;port=5434password=&quot;users_service&quot;name=&quot;users_service&quot;sslmode=&quot;disable&quot;6. MainO arquivo main.go é o mais importante do projeto. Nele estão contidas as declarações das URLS que constam na API.func main() {   dao.InitDB()   defer dao.CloseDB()   r := mux.NewRouter()   r.HandleFunc(&quot;/v1/users/&quot;, handlers.GetAllUsersHandler).Methods(&quot;GET&quot;)   r.HandleFunc(&quot;/v1/users/{id}&quot;, handlers.GetUserByIDHandler).Methods(&quot;GET&quot;)   r.HandleFunc(&quot;/v1/users/&quot;, handlers.CreateUserHandler).Methods(&quot;POST&quot;)   r.HandleFunc(&quot;/v1/users/{id}&quot;, handlers.UpdateUserHandler).Methods(&quot;PUT&quot;)   r.HandleFunc(&quot;/v1/users/{id}&quot;, handlers.DeleteUserHandler).Methods(&quot;DELETE&quot;)   if err := http.ListenAndServe(&quot;:8001&quot;, r); err != nil {     log.Fatal(err)   }}Futuras melhorias      Adicionar testes.        Permitir a integração de novos banco de dados.        Transformar a API em um microserviço.        Adicionar autenticação\\autorização de usuários.  Links interessantesUm pouco da história do GoInstalando o GoA tour of GoEffective GoThe Go BlogGo at Google: Language Design in the Service of Software EngineeringTOMLStatus code HTTPRoy Fielding’s REST dissertationIrresistible APIs"
  },
  
  {
    "title": "Meu primeiro pacote no PyPI",
    "url": "/2017/12/07/meu-primeiro-pacote-em-pypi.html",
    "categories": "",
    "tags": "",
    "date": "2017-12-07 00:00:00 -0200",
    





    "snippet": "Está rolando uma semana bem legal no Olist. O Bootcamp. Estão ocorrendo inúmeras atividades de programação,entre elas o primeiro Hackthon do Olist. Pela primeira vez todos os devs estão reunidos fisicamenteem Curitiba, no office novinho.Ou melhor, quase todos. :cry:Estão participando remotamente eu que estou em Barcelona, e outro dev que está em Portugal.Mas tudo bem. Como a galera é muito criativa por lá, conseguimos participar de tudo!!!  :dancer:E para ajudar minha equipe fiquei responsável por publicar o package do nosso projeto no PyPI. Foi a primeira vez que submeti um pacote. Nesse post mostrei como realizar essa tarefa.  :smile:Mas o que é PyPI?É um repositório de software open-source oficial do Python. Todo mundo pode enviar seus pacotes para lá.E depois pode instalar na sua máquina os pacotes usando pip ou easy_install. Talvez você já tenha feito isso e nem sabia.  :hushed:Como publicar um package?Antes de tudo: seu projeto deve estar em repositório público, pois conforme será mostrado nos passos seguintes oPyPI precisará ter acesso ao projeto.A PyPA(Python Packaging Authority) possui um repositório no GitHub onde você poderá verificar toda a estrutura de um projeto.1. Crie suas contas no PyPIPrimeiro criei as contas no PyPI. Existem 2 tipos - PyPI ePyPI test.Segui como base o artigo do Peter Downs.E ele aconselha a criar as contas com os mesmos user e password. Facilita na hora de lembrar do login.2. Escreva o arquivo .pypircO .pypirc é o arquivo de configuração para fazer a autenticação no PyPI e contém oslinks para fazer o upload do pacote. Ele deve ficar assim:[distutils]index-servers =  pypi  pypitest[pypi]repository: https://upload.pypi.org/legacy/username=your_usernamepassword=your_password[pypitest]repository: https://test.pypi.org/legacy/username=your_usernamepassword=your_password  Os links https://pypi.python.org/pypi e https://testpypi.python.org/pypi não estão mais ativos.Devido a migração para o novo domínio PyPI.org deve-se usar o pypi.org/legacyMais explicações aqui3. Prepare o arquivo de setupCada projeto no PyPI precisa de um arquivo setup.py, no diretório root. Ele contêm alguns dados sobre o seu projeto.Ele deve ficar mais ou menos assim:from distutils.core import setupsetup(  name=&#39;sample&#39;,  packages = [&#39;mypackage&#39;], # this must be the same as the name above  version=&#39;1.2.0&#39;,  description=&#39;A sample Python project&#39;,  author=&#39;The Python Packaging Authority&#39;,  author_email=&#39;pypa-dev@googlegroups.com&#39;,  license=&#39;MIT&#39;,  url=&#39;https://github.com/pypa/sampleproject&#39;, # The project&#39;s main homepage.  keywords = [&#39;testing&#39;, &#39;logging&#39;, &#39;example&#39;], # arbitrary keywords  classifiers = [],)Exemplo de um arquivo de setup4. Faça o upload      PyPI test    Para testar o upload e verificar se tudo está correto deve-se digitar:    python setup.py register -r pypitest    Esse comando faz o registro do pacote no PyPI test.    Se tudo correu bem digite:    python setup.py sdist upload -r pypitest    Pronto! Se não apareceram erros pode-se ir para o próximo passo.        PyPI    Agora é a hora!  :alarm_clock:    Para enviar o seu pacote para o PyPI somente digite:    python setup.py register -r pypi    E por fim:    python setup.py sdist upload -r pypi  Seu pacote já se encontra nos servidores do PyPI!Simples assim!!!!Para saber maisOlisters developers"
  },
  
  {
    "title": "Como é ser desenvolvedora no Olist?",
    "url": "/2017/12/04/como-e-ser-desenvolvedora-no-olist.html",
    "categories": "",
    "tags": "",
    "date": "2017-12-04 00:00:00 -0200",
    





    "snippet": "O tempo passa tão rápido que não percebemos a riqueza das experiências que acumulamos em nossa bagagem. Há um ano atrás foi a primeira vez que falei em um evento de grande porte.Nunca imaginei que faria uma palestra na Python Brasil 12. Naquele dia não tinha a mínima noção do quanto isso enriqueceria minha vida profissional e pessoal. Depois da Python Brasil minha vontade de trabalhar exclusivamente com Python aumentou muito. Foi nesse período que conheci o Olist, e em conversas com o pessoal da comunidade Python descobri que estavam abertas vagas para desenvolvedor(a).Sempre ouvi falar muito bem do Olist e das famosas vagas de programador Python. Inicialmente não mandei meu teste. Eu não acreditava que iria passar, pois possuía pouco tempo de experiência com Python. Após algum tempo criei coragem, resolvi arriscar e me candidatei a uma das vagas.E não é que deu certo? 🙌No início trabalhava no escritório, em Curitiba. Posso dizer que o clima no Olist é diferente. É divertido e acolhedor. Você se sente fazendo parte de algo. Passei 3 meses convivendo com a galera no escritório. E o time de desenvolvimento é praticamente todo remoto. Os devs que estão em Curitiba sempre aparecem por lá.Por reviravoltas da vida, meu marido foi convidado a trabalhar em uma empresa em Barcelona. E aqui estou eu, trabalhando remoto e em fuso horário diferente do Brasil(5 horas a mais). E já se passaram 3 meses! 😲É a primeira vez que trabalho remoto. E a experiência está sendo um grande aprendizado. Tem de ter organização e foco. Deve-se desenvolver uma rotina de horários como se você estivesse trabalhando presencialmente. Se não fizer isso seu trabalho não rende. E no Olist usamos o Slack para nos comunicar, e ter ele sempre por perto (instalado no celular principalmente!) é de extrema importância.Hoje trabalho com muitas tecnologias legais: Python, Django, Microservices, AWS, Heroku, GitHub entre outros. Tudo é novidade para mim. Estou em constante aprendizado!Sinto-me a vontade no time de devs. Todos são sempre solícitos e nunca rolou desconforto pelo fato de eu ser mulher. Cada dia aprendo mais e mais, e vejo que sempre tem pessoas para me ajudar. Todo o processo de Scrum funciona muito bem, mesmo remotamente. Estamos divididos em squads e realizamos dailys toda a manhã, via Mumble. Todos se ajudam. Os PMs e os Devs andam sempre alinhados.Acredito que a cultura da empresa combinada com o expertise do osantana e Daniel Vainsencher Maya, respectivamente nossos CTO e gerente remoto (Yes!! Nosso gerente é remoto!) ajudam para que tudo funcione muito bem.Como é ser desenvolvedora no Olist? É desafiador. Se na maioria de nossas interações com o mundo o que nos move é o desafio, posso dizer que diariamente me sinto motivada a prosseguir com meu trabalho. Minha jornada no Olist está apenas começando e vejo que tenho muito a aprender e a compartilhar.Ainda sou a única mulher na equipe de Devs . Acho que poderia ter bem mais. 👩Junte-se a nós!!!Artigo no Medium"
  }
  
]

